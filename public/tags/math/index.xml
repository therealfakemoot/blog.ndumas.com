<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on code and stuff</title>
    <link>/tags/math/</link>
    <description>Recent content in math on code and stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Nicholas Dumas 2020</copyright>
    <lastBuildDate>Sun, 22 Apr 2018 17:30:51 +0000</lastBuildDate>
    
	<atom:link href="/tags/math/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Quantize</title>
      <link>/posts/golang-quantize/</link>
      <pubDate>Sun, 22 Apr 2018 17:30:51 +0000</pubDate>
      
      <guid>/posts/golang-quantize/</guid>
      <description>The Goal Before going too deep into the implementation details of Genesis, I&amp;rsquo;ll touch on the high level aspect of quantization. Quantization is a technique used to map arbitrary inputs into a well defined output space. This is, practically speaking, a hash function. When the term &amp;lsquo;quantization&amp;rsquo; is used, however, it&amp;rsquo;s typically numeric in nature. Quantization is typically used in audio/image processing to compress inputs for storage or transmission.
Quantizing OpenSimplex My use case is a little less straightforward.</description>
    </item>
    
  </channel>
</rss>